#+TITLE: Presentation Scripte
#+AUTHOR: Yusheng Zhao



* Title
Good [morning/afternoon/evening], everyone. Thank you for joining me at the
JuliaCN Winter Meetup. I'm Yusheng Zhao, currently affiliated with HKUST(GZ),
and my research primarily focuses on quantum information and quantum error
correction.

Today, I'm excited to introduce you to 'ZXCalculus.jl: ZX-calculus in Julia'â€”a
toolkit designed as a starter kit in graphical language for quantum computing.
This presentation will not just be an introduction to ZX-calculus but also a
journey through its practical applications, especially in the context of Julia.

This summer, I had the opportunity to contribute to the development of the
ZXCalculus.jl package, and I'm here to share with you the progress, insights,
and potential of this tool in quantum computing research and applications.

* Outline
Let's take a moment to overview what we'll cover today. Our journey begins with
an introduction to ZX-Calculus, exploring its foundational role in quantum
computing. We'll then bridge into how Julia, a powerful language for technical
computing, intertwines with ZX-Calculus through the ZXCalculus.jl package.

I'll take you through a deep dive into ZXCalculus.jl, discussing its key
features, capabilities, and my personal journey in contributing to its
development. Following this, we'll explore real-world applications of
ZX-Calculus in quantum information and error correction, bringing theory into
practical scenarios.

The highlight of our session will be a hands-on demonstration where I'll convert
theoretical concepts into executable Julia code using ZXCalculus.jl. Finally,
we'll wrap up with a look at the future directions of ZXCalculus.jl and open the
floor for your questions and discussions.

Now, let's embark on this exciting journey through the world of quantum
computing with ZXCalculus.jl.

* Package Introduction
Before diving into the technicalities of ZXCalculus.jl, it's important to
acknowledge its origins. ZXCalculus.jl was initially developed as a
collaborative effort between Dr. Chen Zhao and Dr. Xiu-zhe Roger Luo. At the
time, Dr. Zhao was a Ph.D. student at the Chinese Academy of Sciences Institute
of Mathematics and Systems Science, while Roger Luo was pursuing his Ph.D. at
the University of Waterloo.

Their collaboration was part of the Google Summer of Code, a global program that
offers student developers stipends to write code for various open-source
software projects. This initiative laid the groundwork for what ZXCalculus.jl is
today, a testament to the international and collaborative nature of software
development in quantum computing.

With this background in mind, let's delve deeper into the functionalities and
features of ZXCalculus.jl.


* Introduction to ZX-calculus
In the next few slides. I want to introduce the basics of ZXCalculus. On the
first page, I will give the definition of ZXCalculus as graphical language for
tensor network.

** ZX-calculus: the definition
ZX-Calculus is not just a theoretical construct; it's a practical graphical
language specifically designed for tensor networks in quantum computing. To
fully grasp ZX-Calculus, it's essential to understand its two primary
components.

First, we have the ZX-Diagram. This is the visual aspect of ZX-Calculus, where
tensor networks are represented in a graphical form. It's through these diagrams
that we can intuitively grasp the complex relationships and operations within a
tensor network.

The second key component is the Rewrite Rules. These rules are what make
ZX-Diagrams dynamic and powerful. They allow us to transform one diagram into
another, representing different states or operations within the quantum
computing framework. It's these rules that enable us to perform complex
calculations and manipulations visually, making ZX-Calculus an invaluable tool
in the realm of quantum computing

Now that we understand the foundational components of ZX-Calculus, let's delve
deeper into ZX-Diagrams and see how they visually represent tensor networks

** ZX-Diagram
Moving forward, let's delve into the heart of ZX-Calculus: the ZX Diagrams.
These diagrams are more than just figures; they are graphical representations
that encapsulate the complexities of tensor networks in quantum computing.

Each tensor in a ZX Diagram is uniquely characterized by two key features. First
is the number of legs or edges it has, which represent the dimensions or
connections in the tensor network. The second is the angle of rotation, a
parameter that adds an additional layer of information to the tensor,
representing various quantum states or operations.

Through these ZX Diagrams, we can visually interpret and manipulate complex
quantum operations that would otherwise be challenging to grasp. They serve as a
bridge, simplifying abstract quantum computing concepts into more tangible and
understandable forms.

With a foundational understanding of ZX Diagrams, we are now ready to bridge
these concepts with something more familiar in quantum computing: the quantum
circuit representations. This comparison will illuminate how ZX Diagrams
correspond to and can simplify our understanding of quantum gates and
operations.

** Example: From Circuit to ZXDiagram
In this part of our journey, we will see how the abstract ZX Diagrams correspond
with the more conventional quantum circuit representations. This connection is
crucial for understanding how ZX-Calculus can be a powerful tool in simplifying
and interpreting quantum circuits.

Take, for instance, the Z and X spiders in ZX Diagrams. These are not mere
graphical elements; they directly correspond to fundamental quantum gates like
the Z and X gates in standard quantum circuits. By translating these gates into
ZX Diagram structures, we can streamline complex circuit representations into
more manageable and visually intuitive diagrams.

Through a few examples, we'll see how this translation works, demonstrating the
effectiveness of ZX Diagrams in representing and simplifying quantum circuits.
