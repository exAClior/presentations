#+TITLE: Presentation Scripte
#+AUTHOR: Yusheng Zhao



* Title
Good [morning/afternoon/evening], everyone. Thank you for joining me at the
JuliaCN Winter Meetup. I'm Yusheng Zhao, currently affiliated with HKUST(GZ),
and my research primarily focuses on quantum information and quantum error
correction.

Today, I'm excited to introduce you to 'ZXCalculus.jl: ZX-calculus in Julia'â€”a
toolkit designed as a starter kit in graphical language for quantum computing.
This presentation will not just be an introduction to ZX-calculus but also a
journey through its practical applications, especially in the context of Julia.

This summer, I had the opportunity to contribute to the development of the
ZXCalculus.jl package, and I'm here to share with you the progress, insights,
and potential of this tool in quantum computing research and applications.

* Outline
Let's take a moment to overview what we'll cover today. Our journey begins with
an introduction to ZX-Calculus, exploring its foundational role in quantum
computing. We'll then bridge into how Julia, a powerful language for technical
computing, intertwines with ZX-Calculus through the ZXCalculus.jl package.

I'll take you through a deep dive into ZXCalculus.jl, discussing its key
features, capabilities, and my personal journey in contributing to its
development. Following this, we'll explore real-world applications of
ZX-Calculus in quantum information and error correction, bringing theory into
practical scenarios.

The highlight of our session will be a hands-on demonstration where I'll convert
theoretical concepts into executable Julia code using ZXCalculus.jl. Finally,
we'll wrap up with a look at the future directions of ZXCalculus.jl and open the
floor for your questions and discussions.

Now, let's embark on this exciting journey through the world of quantum
computing with ZXCalculus.jl.

* Package Introduction
Before diving into the technicalities of ZXCalculus.jl, it's important to
acknowledge its origins. ZXCalculus.jl was initially developed as a
collaborative effort between Dr. Chen Zhao and Dr. Xiu-zhe Roger Luo. At the
time, Dr. Zhao was a Ph.D. student at the Chinese Academy of Sciences Institute
of Mathematics and Systems Science, while Roger Luo was pursuing his Ph.D. at
the University of Waterloo.

Their collaboration was part of the Google Summer of Code, a global program that
offers student developers stipends to write code for various open-source
software projects. This initiative laid the groundwork for what ZXCalculus.jl is
today, a testament to the international and collaborative nature of software
development in quantum computing.

With this background in mind, let's delve deeper into the functionalities and
features of ZXCalculus.jl.


* Introduction to ZX-calculus
In the next few slides. I want to introduce the basics of ZXCalculus. On the
first page, I will give the definition of ZXCalculus as graphical language for
tensor network.

** ZX-calculus: the definition
ZX-Calculus is not just a theoretical construct; it's a practical graphical
language specifically designed for tensor networks in quantum computing. To
fully grasp ZX-Calculus, it's essential to understand its two primary
components.

First, we have the ZX-Diagram. This is the visual aspect of ZX-Calculus, where
tensor networks are represented in a graphical form. It's through these diagrams
that we can intuitively grasp the complex relationships and operations within a
tensor network.

The second key component is the Rewrite Rules. These rules are what make
ZX-Diagrams dynamic and powerful. They allow us to transform one diagram into
another, representing different states or operations within the quantum
computing framework. It's these rules that enable us to perform complex
calculations and manipulations visually, making ZX-Calculus an invaluable tool
in the realm of quantum computing

Now that we understand the foundational components of ZX-Calculus, let's delve
deeper into ZX-Diagrams and see how they visually represent tensor networks

** ZX-Diagram
Moving forward, let's delve into the heart of ZX-Calculus: the ZX Diagrams.
These diagrams are more than just figures; they are graphical representations
that encapsulate the complexities of tensor networks in quantum computing.

Each tensor in a ZX Diagram is uniquely characterized by two key features. First
is the number of legs or edges it has, which represent the dimensions or
connections in the tensor network. The second is the angle of rotation, a
parameter that adds an additional layer of information to the tensor,
representing various quantum states or operations.

Through these ZX Diagrams, we can visually interpret and manipulate complex
quantum operations that would otherwise be challenging to grasp. They serve as a
bridge, simplifying abstract quantum computing concepts into more tangible and
understandable forms.

With a foundational understanding of ZX Diagrams, we are now ready to bridge
these concepts with something more familiar in quantum computing: the quantum
circuit representations. This comparison will illuminate how ZX Diagrams
correspond to and can simplify our understanding of quantum gates and
operations.

** Example: From Circuit to ZXDiagram
In our exploration of ZX Diagrams, a fundamental point stands out: their
universality in representing quantum circuits. This universality means that any
quantum gate or operation you encounter in quantum computing can be translated
into a ZX Diagram. This is a powerful aspect, making ZX Diagrams a versatile and
indispensable tool in the field.

Consider the Z and X spiders we discussed earlier. These are just the tip of the
iceberg. Every quantum gate, from the simple Z and X gates to more complex ones,
can be represented within the ZX Diagram framework. This ability to translate
and simplify various quantum operations into intuitive diagrams is what makes
ZX-Calculus so unique and valuable.

This overview of the universality of ZX Diagrams sets the stage for our next
segment. We will now shift our focus to a practical demonstration, where we'll
take a detailed look at how a specific quantum circuit can be translated into a
ZX Diagram. This example will highlight the practical application and
effectiveness of ZX Diagrams in quantum computing.

** Example: from quantum circuit to ZX diagram

In this segment, we delve into a practical application of ZX-Calculus. We'll
take a specific quantum circuit and demonstrate how it can be translated
step-by-step into a ZX Diagram. This process not only illustrates the
versatility of ZX Diagrams but also their power in simplifying complex quantum
operations.

Let's consider [insert a brief description or name of the example quantum
circuit]. This circuit, which performs [describe the function or operation of
the circuit], will serve as our example. We'll break down each element of this
circuit and show how it corresponds to elements in a ZX Diagram.

As we go through this translation, you'll see how the complex interplay of
quantum gates and operations in the circuit is elegantly represented in the ZX
Diagram. This example will illustrate the practicality of ZX-Calculus in
visualizing and simplifying quantum computing concepts.

** Rewrite Rules and Completeness
In our exploration of ZX Diagrams, an important question arises: Why do we
transition to using ZX Diagrams in quantum computing? The answer lies in the set
of transformative rules provided by ZX-Calculus and the concept of completeness.

ZX-Calculus is not just a collection of diagrams; it's a comprehensive system
governed by a set of rules. These rules allow us to transform different ZX
Diagrams into each other, enabling us to represent and manipulate complex
quantum operations in a simplified graphical form.

Now, let's talk about completeness. In the realm of ZX-Calculus, completeness is
defined as follows: 'A graphical calculus is complete when its rewrite rules are
powerful enough to prove any true equation.' What does this mean in practice? It
means that if two diagrams represent the same linear map, then there is a
sequence of rewrites that can transform one diagram into the other. This
property is crucial. It ensures that any quantum operation or state that can be
expressed in a linear map can be fully represented and manipulated within the
ZX-Calculus framework.
